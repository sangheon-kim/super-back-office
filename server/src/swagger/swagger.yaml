openapi: 3.0.3
info:
  description: |
    상헌이의 API 창고
  version: '1.0.0'
  title: Sangheon's API Warehouse
  termsOfService: 'http://swagger.io/terms/'
  contact:
    name: Sangheon Kim
    email: ksj8367@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/sangheon-kim/API_Warehouse/1.0.0
  - description: LocalHost
    url: http://localhost:4000
  - description: '개발망'
    url: https://localhost:8000
tags:
  - name: App
    description: 'API about App'
  - name: RemoteConfiguration
    description: 'RemoteConfiguration에서 사용하는 Project API'
  - name: user
    description: '유저 관련 API'
    # externalDocs:
    #   description: Find out more
    #   url: 'http://swagger.io'
paths:
  /:
    get:
      tags:
        - App
      summary: get Initial Response - Hello world
      operationId: getPage
      parameters:
        - name: err
          in: query
          description: 에러발생 트리거 여부
          schema:
            type: boolean
            example: false
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/SuccessObject'
                properties:
                  _data:
                    $ref: '#/components/schemas/StringValue'
        '500':
          description: 'Error'
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ErrorObject'
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'Baaaam 에러발생!'
  '/{appid}':
    get:
      tags:
        - App
      summary: Get One Page
      operationId: getOnePage
      parameters:
        - name: appid
          in: path
          description: which want you to get Page
          required: true
          schema:
            type: integer
            format: int64
        - name: err
          in: query
          description: 에러발생 트리거 여부
          schema:
            type: boolean
            example: false
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/SuccessObject'
                properties:
                  _data:
                    $ref: '#/components/schemas/ObjectValue'
        '500':
          description: 'Error'
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ErrorObject'
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'Baaaam 에러발생!'
  /projects:
    get:
      tags:
        - RemoteConfiguration
      summary: (Project) Get Project List
      description: Get All Projects List
      operationId: getProjects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/SuccessObject'
                properties:
                  _data:
                    type: object
                    properties:
                      projects:
                        type: array
                        items:
                          $ref: '#/components/schemas/Project'
    post:
      tags:
        - RemoteConfiguration
      summary: (Project) Create Project
      description: Create Project
      operationId: createProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/SuccessObject'
                properties:
                  _data:
                    type: object
                    properties:
                      projects:
                        type: array
                        items:
                          $ref: '#/components/schemas/Project'
  '/projects/{projectId}':
    get:
      tags:
        - RemoteConfiguration
      summary: (Project) Find One Project
      description: Find one project with the projectId
      operationId: getProject
      parameters:
        - name: projectId
          in: path
          description: 프로젝트 ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/SuccessObject'
                properties:
                  _data:
                    type: object
                    properties:
                      project:
                        $ref: '#/components/schemas/Project'
        '404':
          description: Error
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ErrorObject'
                properties:
                  status:
                    type: number
                    example: 404
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'Project is not exist'
    put:
      tags:
        - RemoteConfiguration
      summary: (Project) Update Project
      description: Update the Project with the ProjectId
      operationId: updateProject
      parameters:
        - name: projectId
          in: path
          description: 프로젝트 ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/SuccessObject'
                properties:
                  _data:
                    type: object
                    properties:
                      project:
                        $ref: '#/components/schemas/Project'
        '404':
          description: No Exist
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ErrorObject'
                properties:
                  status:
                    type: number
                    example: 404
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'Project is not exist'
    delete:
      tags:
        - RemoteConfiguration
      summary: (Project) Delete Project
      description: Delete Project By ProjectId
      operationId: deleteProject
      parameters:
        - name: projectId
          in: path
          description: 프로젝트 ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/SuccessObject'
                properties:
                  _data:
                    type: string
                    example: 'OK'

        '404':
          description: No Exist
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ErrorObject'
                properties:
                  status:
                    type: number
                    example: 404
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'Project is not exist'
  '/projects/{projectId}/items':
    get:
      tags:
        - RemoteConfiguration
      summary: (Item) Get Items
      description: Get Items owned by the project with the project ID
      operationId: getItems
      parameters:
        - name: projectId
          in: path
          description: 프로젝트 ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/SuccessObject'
                properties:
                  _data:
                    type: object
                    properties:
                      project:
                        $ref: '#/components/schemas/Project'
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Item'
        '404':
          description: Error
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ErrorObject'
                properties:
                  status:
                    type: number
                    example: 404
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'Project is not exist'
    post:
      tags:
        - RemoteConfiguration
      summary: (Item) Create Item
      description: create Items which are owned by Project that has ID which same request parameter.
      operationId: createItem
      parameters:
        - name: projectId
          in: path
          description: 프로젝트 ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/SuccessObject'
                properties:
                  _data:
                    type: object
                    properties:
                      project:
                        $ref: '#/components/schemas/Project'
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Item'
        '404':
          description: Error
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ErrorObject'
                properties:
                  status:
                    type: number
                    example: 404
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'Project is not exist'
  '/projects/{projectId}/items/{itemId}':
    get:
      tags:
        - RemoteConfiguration
      summary: (Item) Get One Item
      description: Find One Item with the ItemId
      parameters:
        - name: projectId
          in: path
          description: 프로젝트 ID
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: 아이템 ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/SuccessObject'
                properties:
                  _data:
                    type: object
                    properties:
                      project:
                        $ref: '#/components/schemas/Project'
                      item:
                        $ref: '#/components/schemas/Item'

        '404':
          description: Error
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ErrorObject'
                properties:
                  status:
                    type: number
                    example: 404
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'Project or Item is not exist'
    put:
      tags:
        - RemoteConfiguration
      summary: (Item) Update One Item
      description: Update the Item with the ItemId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      parameters:
        - name: projectId
          in: path
          description: 프로젝트 ID
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: 아이템 ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/SuccessObject'
                properties:
                  _data:
                    type: object
                    properties:
                      project:
                        $ref: '#/components/schemas/Project'
                      item:
                        $ref: '#/components/schemas/Item'
        '404':
          description: Error
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ErrorObject'
                properties:
                  status:
                    type: number
                    example: 404
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'Project or Item is not exist'
    delete:
      tags:
        - RemoteConfiguration
      summary: (Item) Delete One Item
      description: Delete the Item with the ItemId
      parameters:
        - name: projectId
          in: path
          description: 프로젝트 ID
          required: true
          schema:
            type: string
        - name: itemId
          in: path
          description: 아이템 ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/SuccessObject'
                properties:
                  _data:
                    type: string
                    example: 'OK'

        '404':
          description: No Exist
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ErrorObject'
                properties:
                  status:
                    type: number
                    example: 404
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'Project or Item is not exist'

  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: >-
        Muliple tags can be provided with comma separated strings. Use\ \ tag1,
        tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      deprecated: true
  '/pet/{petId}':
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the pet
                  type: string
                status:
                  description: Updated status of the pet
                  type: string
    delete:
      tags:
        - pet
      summary: Deletes a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  '/pet/{petId}/uploadImage':
    post:
      tags:
        - pet
      summary: uploads an image
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      operationId: placeOrder
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: order placed for purchasing the pet
        required: true
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.\ \ Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.\ \
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    ErrorObject:
      type: object
      properties:
        success:
          type: boolean
          description: '성공 여부'
          example: false
        status:
          type: number
          description: 'Status Code'
          example: 500
        error:
          description: 'Error Object'
          type: object
          properties:
            message:
              type: string
              example: 'Something Went wrong'
    SuccessObject:
      type: object
      properties:
        success:
          type: boolean
          description: '성공 여부'
          example: true
        status:
          type: number
          description: 'Status Code'
          example: 200
        _data:
          type: object
          description: 'result'
    StringValue:
      type: string
      example: 'Hello 상헌'
    ObjectValue:
      type: object
      properties:
        name:
          type: string
          example: '상헌'
        age:
          type: number
          example: 28
    Project:
      description: Remote Configuration Project Name
      type: object
      properties:
        projectId:
          type: string
          description: 프로젝트 ID
          example: '[프로젝트 ID]'
        description:
          type: string
          description: 해당 프로젝트 설명
          example: '[프로젝트 설명]'
    Item:
      description: Remote Configuration Item Name
      type: object
      properties:
        key:
          type: string
        value:
          type: string
          example: ''
        projectId:
          type: string
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
